from suite import suite

class CookieProblem(suite):

	def likelihood(self, data, hypothesis):

		if len(data) != len(hypothesis):
			print("Invalid arguments - length of data does not match the length of the hypothesis")
			return

		probabilities = []

		for index, flavor in enumerate(data):
			bowl = hypothesis.cookie_bowls[index]
			if flavor == CookieBowl.FLAVOR_CHOCOLATE:
				p = bowl.getProbabilityChocolate()
				bowl.remove_one_chocolate()
			elif flavor == CookieBowl.FLAVOR_VANILLA:
				p = bowl.getProbabilityVanilla()
				bowl.remove_one_vanilla()
			else:
				print("Invalid cookie flavor value - " + flavor)
				return
			probabilities.append(p)

		p_cumulative = 1
		for p in probabilities:
			p_cumulative *= p
		return p_cumulative


class CookieBowl:

	FLAVOR_CHOCOLATE = "chocolate"
	FLAVOR_VANILLA = "vanilla"

	def __init__(self, name, num_chocolate, num_vanilla):
		self.name = name
		self.num_chocolate = num_chocolate
		self.num_vanilla = num_vanilla

	def __eq__(self, other):
		if isinstance(other, CookieBowl):
			return self.name == other.name
		return False

	def __str__(self):
		return self.name

	def getTotalCookies(self):
		return self.num_chocolate + self.num_vanilla

	def getProbabilityChocolate(self):
		return self.num_chocolate / self.getTotalCookies()

	def getProbabilityVanilla(self):
		return self.num_vanilla / self.getTotalCookies()

	def remove_one_vanilla(self):
		self.num_vanilla -= 1

	def remove_one_chocolate(self):
		self.num_chocolate -= 1


class hypothesis:
	""" A hypothesis is essentially a named list of Cookie Bowl objects. The name can be passed as a parameter
		or if a name is not specified one will be generated by concatenating the names of the bowls in the hypothesis
	"""

	def __init__(self, cookie_bowls, name=None):
		if name == None:
			self.name = ""
			for bowl in cookie_bowls:
				self.name += bowl.name + '-'
		else:
			self.name = name
		self.cookie_bowls = cookie_bowls

	def __str__(self):
		return self.name

	def __len__(self):
		return len(self.cookie_bowls)

def main():
	bowl1 = CookieBowl('bowl1', 10, 30)
	bowl2 = CookieBowl('bowl2', 20, 20)


	hypotheses = [ hypothesis((CookieBowl('bowl1', 10, 30), CookieBowl('bowl2', 20, 20))),
				   hypothesis((CookieBowl('bowl1', 10, 30), CookieBowl('bowl1', 10, 30))),
				   hypothesis((CookieBowl('bowl2', 20, 20), CookieBowl('bowl2', 20, 20))),
				   hypothesis((CookieBowl('bowl2', 20, 20), CookieBowl('bowl1', 10, 30))) ]

	data = (CookieBowl.FLAVOR_VANILLA, CookieBowl.FLAVOR_VANILLA)

	pmf = CookieProblem(hypotheses)


	pmf.update(data)

	pmf.print()


if __name__ == '__main__':
	main()